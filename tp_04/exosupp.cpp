#include <stdio.h>
#include <stdlib.h>
#include<iostream>
#include<sys/ipc.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<sys/shm.h>
#include<sys/stat.h>
#include<string.h>
#include<unistd.h> 
using namespace std ;
#define SHM_SIZE 128

int main() {

    // Création de la mémoire partagée
    int shmid = shmget(IPC_PRIVATE, SHM_SIZE, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
   
    // Attachement de la mémoire partagée
    char *shared_message = (char *)shmat(shmid, NULL, 0);
    if (shared_message == (char *)(-1)) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    // Initialisation du message
    sprintf(shared_message, "Message initial");

    // Création du premier fils
    pid_t pid1 = fork();

    if (pid1 == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid1 == 0) {  
        cout <<"Fils 1 lit :"<< shared_message << endl;
        sprintf(shared_message + strlen(shared_message), " - Fils 1 (PID %d)", getpid());
        exit(EXIT_SUCCESS);
    }

    // Création du deuxième fils
    pid_t pid2 = fork();

    if (pid2 == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid2 == 0) {  // Code du deuxième fils
        cout<< "Fils 2 lit : "<< shared_message << endl ;
        sprintf(shared_message + strlen(shared_message), " - Fils 2 (PID %d)", getpid());
        exit(EXIT_SUCCESS);
    }

    // Attente de la fin des deux fils
    waitpid(pid1, NULL, 0);
    waitpid(pid2, NULL, 0);

    // Affichage du message final
    cout<<"Message final : " << shared_message << endl;

    // Détachement de la mémoire partagée
    if (shmdt(shared_message) == -1) {
        perror("shmdt");
        exit(EXIT_FAILURE);
    }

    // Suppression de la mémoire partagée
    if (shmctl(shmid, IPC_RMID, NULL) == -1) {
        perror("shmctl");
        exit(EXIT_FAILURE);
    }

    return 0;
}
